{"version":3,"sources":["webpack:///./common/static/xmodule/descriptors/js/001-8b805ada2ba64e646af6992f4da2a942.js"],"names":["hasPropsHelper","hasOwnProperty","extendsHelper","child","parent","key","call","ctor","constructor","prototype","__super__","MarkdownEditingDescriptor","_super","multipleChoiceTemplate","gettext","checkboxChoiceTemplate","stringInputTemplate","numberInputTemplate","selectTemplate","headerTemplate","explanationTemplate","element","that","onToolbarButton","apply","arguments","onShowXMLButton","$","length","markdown_editor","CodeMirror","fromTextArea","lineWrapping","mode","setCurrentEditor","on","find","hide","createXMLEditor","text","xml_editor","lineNumbers","setValue","getWrapperElement","toggleClass","refresh","e","preventDefault","confirmConversionToXml","markdownToXml","getValue","setCursor","confirm","revisedSelection","selection","getSelection","currentTarget","attr","insertMultipleChoice","insertStringInput","insertNumberInput","insertCheckboxChoice","insertSelect","insertHeader","insertExplanation","replaceSelection","focus","editor","current_editor","show","save","off","changeEditor","data","metadata","markdown","nullout","selectedText","insertGenericChoice","choiceStart","choiceEnd","template","cleanSelectedText","line","lines","revisedLines","i","len","replace","split","test","insertGenericInput","lineStart","lineEnd","demandHintTags","finalDemandHints","finalXml","responseTypesMarkdown","responseTypesXML","toXml","partialMarkdown","xml","splits","makeParagraph","serializer","responseType","$xml","responseTypesSelector","inputtype","beforeInputtype","extractHint","demandhints","responseTypes","match","questionText","result","label","inner","options","exec","trim","inputText","detectParens","curly","hint","parens","labelassign","labelmatch","substring","nothint","group1","textHint","optiontag","correct","optionlines","correctstr","hintstr","indexOf","Error","choices","shuffle","value","inparens","fixed","groupString","abhint","endHints","hintbody","select","hints","p","answersList","isRangeToleranceCase","answer","_","contains","checkIsNumeric","stringValue","isNaN","parseFloat","getAnswerData","answerValue","answerData","answerParams","processNumericalResponse","answerValues","firstAnswer","numericalResponseString","additionalAnswerString","hintLine","additionalTextHint","additionalHintLine","orMatch","hasTolerance","processStringResponse","values","typ","string","notMatch","shift","slice","p1","join","push","parseXML","firstElementChild","each","children","nodeName","insertBefore","appendChild","XMLSerializer","serializeToString","responseTypeMarkdown","XModule","Descriptor","window"],"mappings":"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","file":"ProblemBlockStudio.js","sourcesContent":["/*** IMPORTS FROM imports-loader ***/\n(function() {\n\n/* global CodeMirror, _, XModule */\n// no-useless-escape disabled because of warnings in regexp expressions within the\n// \"toXML\" code. When the \"useless escapes\" were removed, some of the unit tests\n// failed, but only in Jenkins, indicating browser-specific behavior.\n/* eslint no-useless-escape: 0 */\n\n(function() {\n    'use strict';\n    var hasPropsHelper = {}.hasOwnProperty,\n        extendsHelper = function(child, parent) {\n            // This helper method was generated by CoffeeScript. Suppressing eslint warnings.\n            var key;\n            for (key in parent) { // eslint-disable-line no-restricted-syntax\n                if (hasPropsHelper.call(parent, key)) {\n                    child[key] = parent[key]; // eslint-disable-line no-param-reassign\n                }\n            }\n            function ctor() {\n                this.constructor = child;\n            }\n\n            ctor.prototype = parent.prototype;\n            child.prototype = new ctor(); // eslint-disable-line no-param-reassign\n            child.__super__ = parent.prototype; // eslint-disable-line no-param-reassign, no-underscore-dangle\n            return child;\n        };\n\n    this.MarkdownEditingDescriptor = (function(_super) {\n        // The style of these declarations come from CoffeeScript. Rather than rewriting them,\n        // the eslint warnings are being suppressed.\n        extendsHelper(MarkdownEditingDescriptor, _super); // eslint-disable-line no-use-before-define\n\n        MarkdownEditingDescriptor.multipleChoiceTemplate = '( ) ' + // eslint-disable-line no-use-before-define\n            (gettext('incorrect')) + '\\n( ) ' + (gettext('incorrect')) + '\\n(x) ' + (gettext('correct')) + '\\n';\n\n        MarkdownEditingDescriptor.checkboxChoiceTemplate = '[x] ' + // eslint-disable-line no-use-before-define\n            (gettext('correct')) + '\\n[ ] incorrect\\n[x] correct\\n';\n\n        MarkdownEditingDescriptor.stringInputTemplate = '= ' + // eslint-disable-line no-use-before-define\n            (gettext('answer')) + '\\n';\n\n        MarkdownEditingDescriptor.numberInputTemplate = '= ' +  // eslint-disable-line no-use-before-define\n            (gettext('answer')) + ' +- 0.001%\\n';\n\n        MarkdownEditingDescriptor.selectTemplate = '[[' + // eslint-disable-line no-use-before-define\n            (gettext('incorrect')) + ', (' + (gettext('correct')) + '), ' + (gettext('incorrect')) + ']]\\n';\n\n        MarkdownEditingDescriptor.headerTemplate = '' + // eslint-disable-line no-use-before-define\n            (gettext('Header')) + '\\n=====\\n';\n\n        MarkdownEditingDescriptor.explanationTemplate = '[explanation]\\n' + // eslint-disable-line no-use-before-define\n            (gettext('Short explanation')) + '\\n[explanation]\\n';\n\n        function MarkdownEditingDescriptor(element) {\n            var that = this;\n            this.onToolbarButton = function() {\n                return MarkdownEditingDescriptor.prototype.onToolbarButton.apply(that, arguments);\n            };\n            this.onShowXMLButton = function() {\n                return MarkdownEditingDescriptor.prototype.onShowXMLButton.apply(that, arguments);\n            };\n            this.element = element;\n            if ($('.markdown-box', this.element).length !== 0) {\n                this.markdown_editor = CodeMirror.fromTextArea($('.markdown-box', element)[0], {\n                    lineWrapping: true,\n                    mode: null\n                });\n                this.setCurrentEditor(this.markdown_editor);\n                // Add listeners for toolbar buttons (only present for markdown editor)\n                this.element.on('click', '.xml-tab', this.onShowXMLButton);\n                this.element.on('click', '.format-buttons button', this.onToolbarButton);\n                // Hide the XML text area\n                $(this.element.find('.xml-box')).hide();\n            } else {\n                this.createXMLEditor();\n            }\n        }\n\n        /*\n         Creates the XML Editor and sets it as the current editor. If text is passed in,\n         it will replace the text present in the HTML template.\n\n         text: optional argument to override the text passed in via the HTML template\n         */\n        MarkdownEditingDescriptor.prototype.createXMLEditor = function(text) {\n            this.xml_editor = CodeMirror.fromTextArea($('.xml-box', this.element)[0], {\n                mode: 'xml',\n                lineNumbers: true,\n                lineWrapping: true\n            });\n            if (text) {\n                this.xml_editor.setValue(text);\n            }\n            this.setCurrentEditor(this.xml_editor);\n            $(this.xml_editor.getWrapperElement()).toggleClass('CodeMirror-advanced');\n            // Need to refresh to get line numbers to display properly.\n            this.xml_editor.refresh();\n        };\n\n        /*\n         User has clicked to show the XML editor. Before XML editor is swapped in,\n         the user will need to confirm the one-way conversion.\n         */\n        MarkdownEditingDescriptor.prototype.onShowXMLButton = function(e) {\n            e.preventDefault();\n            if (this.confirmConversionToXml()) {\n                this.createXMLEditor(MarkdownEditingDescriptor.markdownToXml(this.markdown_editor.getValue()));\n                this.xml_editor.setCursor(0);\n                // Hide markdown-specific toolbar buttons\n                $(this.element.find('.editor-bar')).hide();\n            }\n        };\n\n        /*\n         Have the user confirm the one-way conversion to XML.\n         Returns true if the user clicked OK, else false.\n         */\n        MarkdownEditingDescriptor.prototype.confirmConversionToXml = function() {\n            return confirm(gettext('If you use the Advanced Editor, this problem will be converted to XML and you will not be able to return to the Simple Editor Interface.\\n\\nProceed to the Advanced Editor and convert this problem to XML?')); // eslint-disable-line max-len, no-alert\n        };\n\n        /*\n         Event listener for toolbar buttons (only possible when markdown editor is visible).\n         */\n        MarkdownEditingDescriptor.prototype.onToolbarButton = function(e) {\n            var revisedSelection, selection;\n            e.preventDefault();\n            selection = this.markdown_editor.getSelection();\n            revisedSelection = null;\n            switch ($(e.currentTarget).attr('class')) {\n            case 'multiple-choice-button':\n                revisedSelection = MarkdownEditingDescriptor.insertMultipleChoice(selection);\n                break;\n            case 'string-button':\n                revisedSelection = MarkdownEditingDescriptor.insertStringInput(selection);\n                break;\n            case 'number-button':\n                revisedSelection = MarkdownEditingDescriptor.insertNumberInput(selection);\n                break;\n            case 'checks-button':\n                revisedSelection = MarkdownEditingDescriptor.insertCheckboxChoice(selection);\n                break;\n            case 'dropdown-button':\n                revisedSelection = MarkdownEditingDescriptor.insertSelect(selection);\n                break;\n            case 'header-button':\n                revisedSelection = MarkdownEditingDescriptor.insertHeader(selection);\n                break;\n            case 'explanation-button':\n                revisedSelection = MarkdownEditingDescriptor.insertExplanation(selection);\n                break;\n            default:\n                break;\n            }\n            if (revisedSelection !== null) {\n                this.markdown_editor.replaceSelection(revisedSelection);\n                this.markdown_editor.focus();\n            }\n        };\n\n        /*\n         Stores the current editor and hides the one that is not displayed.\n         */\n        MarkdownEditingDescriptor.prototype.setCurrentEditor = function(editor) {\n            if (this.current_editor) {\n                $(this.current_editor.getWrapperElement()).hide();\n            }\n            this.current_editor = editor;\n            $(this.current_editor.getWrapperElement()).show();\n            return $(this.current_editor).focus();\n        };\n\n        /*\n         Called when save is called. Listeners are unregistered because editing the block again will\n         result in a new instance of the descriptor. Note that this is NOT the case for cancel--\n         when cancel is called the instance of the descriptor is reused if edit is selected again.\n         */\n        MarkdownEditingDescriptor.prototype.save = function() {\n            this.element.off('click', '.xml-tab', this.changeEditor);\n            this.element.off('click', '.format-buttons button', this.onToolbarButton);\n            if (this.current_editor === this.markdown_editor) {\n                return {\n                    data: MarkdownEditingDescriptor.markdownToXml(this.markdown_editor.getValue()),\n                    metadata: {\n                        markdown: this.markdown_editor.getValue()\n                    }\n                };\n            } else {\n                return {\n                    data: this.xml_editor.getValue(),\n                    nullout: ['markdown']\n                };\n            }\n        };\n\n        MarkdownEditingDescriptor.insertMultipleChoice = function(selectedText) {\n            return MarkdownEditingDescriptor.insertGenericChoice(selectedText, '(', ')',\n                MarkdownEditingDescriptor.multipleChoiceTemplate\n            );\n        };\n\n        MarkdownEditingDescriptor.insertCheckboxChoice = function(selectedText) {\n            return MarkdownEditingDescriptor.insertGenericChoice(selectedText, '[', ']',\n                MarkdownEditingDescriptor.checkboxChoiceTemplate\n            );\n        };\n\n        MarkdownEditingDescriptor.insertGenericChoice = function(selectedText, choiceStart, choiceEnd, template) {\n            var cleanSelectedText, line, lines, revisedLines, i, len;\n            if (selectedText.length > 0) {\n                // Replace adjacent newlines with a single newline, strip any trailing newline\n                cleanSelectedText = selectedText.replace(/\\n+/g, '\\n').replace(/\\n$/, '');\n                lines = cleanSelectedText.split('\\n');\n                revisedLines = '';\n                for (i = 0, len = lines.length; i < len; i++) {\n                    line = lines[i];\n                    revisedLines += choiceStart;\n                    // a stand alone x before other text implies that this option is \"correct\"\n                    if (/^\\s*x\\s+(\\S)/i.test(line)) {\n                        // Remove the x and any initial whitespace as long as there's more text on the line\n                        line = line.replace(/^\\s*x\\s+(\\S)/i, '$1');\n                        revisedLines += 'x';\n                    } else {\n                        revisedLines += ' ';\n                    }\n                    revisedLines += choiceEnd + ' ' + line + '\\n';\n                }\n                return revisedLines;\n            } else {\n                return template;\n            }\n        };\n\n        MarkdownEditingDescriptor.insertStringInput = function(selectedText) {\n            return MarkdownEditingDescriptor.insertGenericInput(selectedText, '= ', '',\n                MarkdownEditingDescriptor.stringInputTemplate\n            );\n        };\n\n        MarkdownEditingDescriptor.insertNumberInput = function(selectedText) {\n            return MarkdownEditingDescriptor.insertGenericInput(selectedText, '= ', '',\n                MarkdownEditingDescriptor.numberInputTemplate\n            );\n        };\n\n        MarkdownEditingDescriptor.insertSelect = function(selectedText) {\n            return MarkdownEditingDescriptor.insertGenericInput(selectedText, '[[', ']]',\n                MarkdownEditingDescriptor.selectTemplate\n            );\n        };\n\n        MarkdownEditingDescriptor.insertHeader = function(selectedText) {\n            return MarkdownEditingDescriptor.insertGenericInput(selectedText, '', '\\n====\\n',\n                MarkdownEditingDescriptor.headerTemplate\n            );\n        };\n\n        MarkdownEditingDescriptor.insertExplanation = function(selectedText) {\n            return MarkdownEditingDescriptor.insertGenericInput(selectedText, '[explanation]\\n', '\\n[explanation]',\n                MarkdownEditingDescriptor.explanationTemplate\n            );\n        };\n\n        MarkdownEditingDescriptor.insertGenericInput = function(selectedText, lineStart, lineEnd, template) {\n            if (selectedText.length > 0) {\n                return lineStart + selectedText + lineEnd;\n            } else {\n                return template;\n            }\n        };\n\n        MarkdownEditingDescriptor.markdownToXml = function(markdown) {\n            var demandHintTags = [],\n                finalDemandHints, finalXml, responseTypesMarkdown, responseTypesXML, toXml;\n            toXml = function(partialMarkdown) {\n                var xml = partialMarkdown,\n                    i, splits, makeParagraph, serializer, responseType, $xml, responseTypesSelector,\n                    inputtype, beforeInputtype, extractHint, demandhints;\n                var responseTypes = [\n                    'optionresponse', 'multiplechoiceresponse', 'stringresponse', 'numericalresponse', 'choiceresponse'\n                ];\n\n                // fix DOS \\r\\n line endings to look like \\n\n                xml = xml.replace(/\\r\\n/g, '\\n');\n\n                // replace headers\n                xml = xml.replace(/(^.*?$)(?=\\n\\=\\=+$)/gm, '<h3 class=\"hd hd-2 problem-header\">$1</h3>');\n                xml = xml.replace(/\\n^\\=\\=+$/gm, '');\n\n                // extract question and description(optional)\n                // >>question||description<< converts to\n                // <label>question</label> <description>description</description>\n                xml = xml.replace(/>>([^]+?)<</gm, function(match, questionText) {\n                    var result = questionText.split('||'),\n                        label = '<label>' + result[0] + '</label>\\n'; // xss-lint: disable=javascript-concat-html\n\n                    // don't add empty <description> tag\n                    if (result.length === 1 || !result[1]) {\n                        return label;\n                    }\n                    // xss-lint: disable=javascript-concat-html\n                    return label + '<description>' + result[1] + '</description>\\n';\n                });\n\n                // Pull out demand hints,  || a hint ||\n                demandhints = '';\n                xml = xml.replace(/(^\\s*\\|\\|.*?\\|\\|\\s*$\\n?)+/gm, function(match) {  // $\\n\n                    var inner,\n                        options = match.split('\\n');\n                    for (i = 0; i < options.length; i += 1) {\n                        inner = /\\s*\\|\\|(.*?)\\|\\|/.exec(options[i]);\n                        if (inner) {\n                            // xss-lint: disable=javascript-concat-html\n                            demandhints += '  <hint>' + inner[1].trim() + '</hint>\\n';\n                        }\n                    }\n                    return '';\n                });\n\n                // replace \\n+whitespace within extended hint {{ .. }}, by a space, so the whole\n                // hint sits on one line.\n                // This is the one instance of {{ ... }} matching that permits \\n\n                xml = xml.replace(/{{(.|\\n)*?}}/gm, function(match) {\n                    return match.replace(/\\r?\\n( |\\t)*/g, ' ');\n                });\n\n                // Function used in many places to extract {{ label:: a hint }}.\n                // Returns a little hash with various parts of the hint:\n                // hint: the hint or empty, nothint: the rest\n                // labelassign: javascript assignment of label attribute, or empty\n                extractHint = function(inputText, detectParens) {\n                    var text = inputText,\n                        curly = /\\s*{{(.*?)}}/.exec(text),\n                        hint = '',\n                        label = '',\n                        parens = false,\n                        labelassign = '',\n                        labelmatch;\n                    if (curly) {\n                        text = text.replace(curly[0], '');\n                        hint = curly[1].trim();\n                        labelmatch = /^(.*?)::/.exec(hint);\n                        if (labelmatch) {\n                            hint = hint.replace(labelmatch[0], '').trim();\n                            label = labelmatch[1].trim();\n                            labelassign = ' label=\"' + label + '\"';\n                        }\n                    }\n                    if (detectParens) {\n                        if (text.length >= 2 && text[0] === '(' && text[text.length - 1] === ')') {\n                            text = text.substring(1, text.length - 1);\n                            parens = true;\n                        }\n                    }\n                    return {\n                        nothint: text,\n                        hint: hint,\n                        label: label,\n                        parens: parens,\n                        labelassign: labelassign\n                    };\n                };\n\n\n                // replace selects\n                // [[ a, b, (c) ]]\n                // [[\n                //     a\n                //     b\n                //     (c)\n                //  ]]\n                // <optionresponse>\n                //  <optioninput>\n                //     <option  correct=\"True\">AAA<optionhint  label=\"Good Job\">\n                //          Yes, multiple choice is the right answer.\n                //  </optionhint>\n                // Note: part of the option-response syntax looks like multiple-choice, so it must be processed first.\n                xml = xml.replace(/\\[\\[((.|\\n)+?)\\]\\]/g, function(match, group1) {\n                    var textHint, options, optiontag, correct, lines, optionlines, line, correctstr, hintstr, label;\n                    // decide if this is old style or new style\n                    if (match.indexOf('\\n') === -1) {  // OLD style, [[ .... ]]  on one line\n                        options = group1.split(/\\,\\s*/g);\n                        optiontag = '  <optioninput options=\"(';\n                        for (i = 0; i < options.length; i += 1) {\n                            optiontag += \"'\" + options[i].replace(/(?:^|,)\\s*\\((.*?)\\)\\s*(?:$|,)/g, '$1') + \"'\" +\n                                (i < options.length - 1 ? ',' : '');\n                        }\n                        optiontag += ')\" correct=\"';\n                        correct = /(?:^|,)\\s*\\((.*?)\\)\\s*(?:$|,)/g.exec(group1);\n                        if (correct) {\n                            optiontag += correct[1];\n                        }\n                        optiontag += '\">';\n                        // xss-lint: disable=javascript-concat-html\n                        return '\\n<optionresponse>\\n' + optiontag + '</optioninput>\\n</optionresponse>\\n\\n';\n                    }\n\n                    // new style  [[ many-lines ]]\n                    lines = group1.split('\\n');\n                    optionlines = '';\n                    for (i = 0; i < lines.length; i++) {\n                        line = lines[i].trim();\n                        if (line.length > 0) {\n                            textHint = extractHint(line, true);\n                            if (!textHint.nothint) {\n                                throw new Error(gettext(\"An answer option has been left blank. Please review and edit the component.\"));\n                            }\n                            correctstr = ' correct=\"' + (textHint.parens ? 'True' : 'False') + '\"';\n                            hintstr = '';\n                            if (textHint.hint) {\n                                label = textHint.label;\n                                if (label) {\n                                    label = ' label=\"' + label + '\"';\n                                }\n                                // xss-lint: disable=javascript-concat-html\n                                hintstr = ' <optionhint' + label + '>' + textHint.hint + '</optionhint>';\n                            }\n                            // xss-lint: disable=javascript-concat-html\n                            optionlines += '    <option' + correctstr + '>' + textHint.nothint + hintstr +\n                                '</option>\\n';\n                        }\n                    }\n                    // xss-lint: disable=javascript-concat-html\n                    return '\\n<optionresponse>\\n  <optioninput>\\n' + optionlines +\n                        '  </optioninput>\\n</optionresponse>\\n\\n';\n                });\n\n                // multiple choice questions\n                //\n                xml = xml.replace(/(^\\s*\\(.{0,3}\\).*?$\\n*)+/gm, function(match) {\n                    var choices = '',\n                        shuffle = false,\n                        options = match.split('\\n'),\n                        value, inparens, correct,\n                        fixed, hint, result;\n                    for (i = 0; i < options.length; i++) {\n                        options[i] = options[i].trim();                   // trim off leading/trailing whitespace\n                        if (options[i].length > 0) {\n                            value = options[i].split(/^\\s*\\(.{0,3}\\)\\s*/)[1];\n                            if (!value) {\n                                throw new Error(gettext(\"An answer option has been left blank. Please review and edit the component.\"));\n                            }\n                            inparens = /^\\s*\\((.{0,3})\\)\\s*/.exec(options[i])[1];\n                            correct = /x/i.test(inparens);\n                            fixed = '';\n                            if (/@/.test(inparens)) {\n                                fixed = ' fixed=\"true\"';\n                            }\n                            if (/!/.test(inparens)) {\n                                shuffle = true;\n                            }\n\n                            hint = extractHint(value);\n                            if (hint.hint) {\n                                value = hint.nothint;\n                                // xss-lint: disable=javascript-concat-html\n                                value = value + ' <choicehint' + hint.labelassign + '>' + hint.hint + '</choicehint>';\n                            }\n                            // xss-lint: disable=javascript-concat-html\n                            choices += '    <choice correct=\"' + correct + '\"' + fixed + '>' + value + '</choice>\\n';\n                        }\n                    }\n                    result = '<multiplechoiceresponse>\\n';\n                    if (shuffle) {\n                        result += '  <choicegroup type=\"MultipleChoice\" shuffle=\"true\">\\n';\n                    } else {\n                        result += '  <choicegroup type=\"MultipleChoice\">\\n';\n                    }\n                    result += choices;\n                    result += '  </choicegroup>\\n';\n                    result += '</multiplechoiceresponse>\\n\\n';\n                    return result;\n                });\n\n                // group check answers\n                // [.] with {{...}} lines mixed in\n                xml = xml.replace(/(^\\s*((\\[.?\\])|({{.*?}})).*?$\\n*)+/gm, function(match) {\n                    var groupString = '<choiceresponse>\\n',\n                        options = match.split('\\n'),\n                        value, correct, abhint, endHints, hintbody,\n                        hint, inner, select, hints;\n\n                    groupString += '  <checkboxgroup>\\n';\n                    endHints = '';  // save these up to emit at the end\n\n                    for (i = 0; i < options.length; i += 1) {\n                        if (options[i].trim().length > 0) {\n                            // detect the {{ ((A*B)) ...}} case first\n                            // emits: <compoundhint value=\"A*B\">AB hint</compoundhint>\n\n                            abhint = /^\\s*{{\\s*\\(\\((.*?)\\)\\)(.*?)}}/.exec(options[i]);\n                            if (abhint) {\n                                // lone case of hint text processing outside of extractHint, since syntax here is unique\n                                hintbody = abhint[2];\n                                hintbody = hintbody.replace('&lf;', '\\n').trim();\n                                // xss-lint: disable=javascript-concat-html\n                                endHints += '    <compoundhint value=\"' + abhint[1].trim() + '\">' + hintbody +\n                                    '</compoundhint>\\n';\n                                continue;  // bail\n                            }\n\n                            value = options[i].split(/^\\s*\\[.?\\]\\s*/)[1];\n                            if (!value) {\n                                throw new Error(gettext(\"An answer option has been left blank. Please review and edit the component.\"));\n                            }\n                            correct = /^\\s*\\[x\\]/i.test(options[i]);\n                            hints = '';\n                            //  {{ selected: You’re right that apple is a fruit. },\n                            //   {unselected: Remember that apple is also a fruit.}}\n                            hint = extractHint(value);\n                            if (hint.hint) {\n                                inner = '{' + hint.hint + '}';  // parsing is easier if we put outer { } back\n\n                                // include \\n since we are downstream of extractHint()\n                                select = /{\\s*(s|selected):((.|\\n)*?)}/i.exec(inner);\n                                // checkbox choicehints get their own line, since there can be two of them\n                                // <choicehint selected=\"true\">You’re right that apple is a fruit.</choicehint>\n                                if (select) {\n                                    // xss-lint: disable=javascript-concat-html\n                                    hints += '\\n      <choicehint selected=\"true\">' + select[2].trim() +\n                                        '</choicehint>';\n                                }\n                                select = /{\\s*(u|unselected):((.|\\n)*?)}/i.exec(inner);\n                                if (select) {\n                                    // xss-lint: disable=javascript-concat-html\n                                    hints += '\\n      <choicehint selected=\"false\">' + select[2].trim() +\n                                        '</choicehint>';\n                                }\n\n                                // Blank out the original text only if the specific \"selected\" syntax is found\n                                // That way, if the user types it wrong, at least they can see it's not processed.\n                                if (hints) {\n                                    value = hint.nothint;\n                                }\n                            }\n                            // xss-lint: disable=javascript-concat-html\n                            groupString += '    <choice correct=\"' + correct + '\">' + value + hints + '</choice>\\n';\n                        }\n                    }\n\n                    groupString += endHints;\n                    groupString += '  </checkboxgroup>\\n';\n                    groupString += '</choiceresponse>\\n\\n';\n\n                    return groupString;\n                });\n\n\n                // replace string and numerical, numericalresponse, stringresponse\n                // A fine example of the function-composition programming style.\n                xml = xml.replace(/(^s?\\=\\s*(.*?$)(\\n*(or|not)\\=\\s*(.*?$))*)+/gm, function(match, p) {\n                    // Line split here, trim off leading xxx= in each function\n                    var answersList = p.split('\\n'),\n\n                        isRangeToleranceCase = function(answer) {\n                            return _.contains(\n                                ['[', '('], answer[0]) && _.contains([']', ')'], answer[answer.length - 1]\n                            );\n                        },\n\n                        checkIsNumeric = function(stringValue) {\n                            // remove OLX feedback\n                            if ((stringValue.indexOf('{{') !== -1) && (stringValue.indexOf('}}') !== -1)) {\n                                stringValue = stringValue.replace(/{{[\\s\\S]*?}}/g, '').trim();\n                            }\n                            // allow for \"e\" for scientific notation, otherwise, exclude letters\n                            if (stringValue.match(/[a-df-z]/i)) {\n                                return false;\n                            }\n                            return !isNaN(parseFloat(stringValue));\n                        },\n\n                        getAnswerData = function(answerValue) {\n                            var answerData = {},\n                                answerParams = /(.*?)\\+\\-\\s*(.*?$)/.exec(answerValue);\n                            if (answerParams) {\n                                answerData.answer = answerParams[1].replace(/\\s+/g, ''); // inputs like 5*2 +- 10\n                                answerData.default = answerParams[2];\n                            } else {\n                                answerData.answer = answerValue.replace(/\\s+/g, ''); // inputs like 5*2\n                            }\n                            return answerData;\n                        },\n\n                        processNumericalResponse = function(answerValues) {\n                            var firstAnswer, answerData, numericalResponseString, additionalAnswerString,\n                                textHint, hintLine, additionalTextHint, additionalHintLine, orMatch, hasTolerance;\n\n                            // First string case is s?= [e.g. = 100]\n                            firstAnswer = answerValues[0].replace(/^\\=\\s*/, '');\n\n                            // If answer is not numerical\n                            if (!checkIsNumeric(firstAnswer) && !isRangeToleranceCase(firstAnswer)) {\n                                return false;\n                            }\n\n                            textHint = extractHint(firstAnswer);\n                            hintLine = '';\n                            if (textHint.hint) {\n                                firstAnswer = textHint.nothint;\n                                // xss-lint: disable=javascript-concat-html\n                                hintLine = '  <correcthint' + textHint.labelassign + '>' +\n                                // xss-lint: disable=javascript-concat-html\n                                    textHint.hint + '</correcthint>\\n';\n                            }\n\n                            // Range case\n                            if (isRangeToleranceCase(firstAnswer)) {\n                                // [5, 7) or (5, 7), or (1.2345 * (2+3), 7*4 ]  - range tolerance case\n                                // = (5*2)*3 should not be used as range tolerance\n                                // xss-lint: disable=javascript-concat-html\n                                numericalResponseString = '<numericalresponse answer=\"' + firstAnswer + '\">\\n';\n                            } else {\n                                answerData = getAnswerData(firstAnswer);\n                                // xss-lint: disable=javascript-concat-html\n                                numericalResponseString = '<numericalresponse answer=\"' + answerData.answer + '\">\\n';\n                                if (answerData.default) {\n                                    // xss-lint: disable=javascript-concat-html\n                                    numericalResponseString += '  <responseparam type=\"tolerance\" default=\"' +\n                                    // xss-lint: disable=javascript-concat-html\n                                        answerData.default + '\" />\\n';\n                                }\n                            }\n\n                            // Additional answer case or= [e.g. or= 10]\n                            // Since answerValues[0] is firstAnswer, so we will not include this in additional answers.\n                            additionalAnswerString = '';\n                            for (i = 1; i < answerValues.length; i++) {\n                                additionalHintLine = '';\n                                additionalTextHint = extractHint(answerValues[i]);\n                                orMatch = /^or\\=\\s*(.*)/.exec(additionalTextHint.nothint);\n                                if (orMatch) {\n                                    hasTolerance = /(.*?)\\+\\-\\s*(.*?$)/.exec(orMatch[1]);\n                                    // Do not add additional_answer if additional answer is not numerical (eg. or= ABC)\n                                    // or contains range tolerance case (eg. or= (5,7)\n                                    // or has tolerance (eg. or= 10 +- 0.02)\n                                    if (isNaN(parseFloat(orMatch[1])) ||\n                                        isRangeToleranceCase(orMatch[1]) ||\n                                        hasTolerance) {\n                                        continue;\n                                    }\n\n                                    if (additionalTextHint.hint) {\n                                        // xss-lint: disable=javascript-concat-html\n                                        additionalHintLine = '<correcthint' +\n                                            // xss-lint: disable=javascript-concat-html\n                                            additionalTextHint.labelassign + '>' +\n                                            // xss-lint: disable=javascript-concat-html\n                                            additionalTextHint.hint + '</correcthint>';\n                                    }\n\n                                    // xss-lint: disable=javascript-concat-html\n                                    additionalAnswerString += '  <additional_answer answer=\"' + orMatch[1] + '\">';\n                                    additionalAnswerString += additionalHintLine;\n                                    additionalAnswerString += '</additional_answer>\\n';\n                                }\n                            }\n\n                            // Add additional answers string to numerical problem string.\n                            if (additionalAnswerString) {\n                                numericalResponseString += additionalAnswerString;\n                            }\n\n                            numericalResponseString += '  <formulaequationinput />\\n';\n                            numericalResponseString += hintLine;\n                            numericalResponseString += '</numericalresponse>\\n\\n';\n\n                            return numericalResponseString;\n                        },\n\n                        processStringResponse = function(values) {\n                            var firstAnswer, textHint, typ, string, orMatch, notMatch;\n                            // First string case is s?=\n                            firstAnswer = values.shift();\n                            firstAnswer = firstAnswer.replace(/^s?\\=\\s*/, '');\n                            textHint = extractHint(firstAnswer);\n                            firstAnswer = textHint.nothint;\n                            typ = ' type=\"ci\"';\n                            if (firstAnswer[0] === '|') { // this is regexp case\n                                typ = ' type=\"ci regexp\"';\n                                firstAnswer = firstAnswer.slice(1).trim();\n                            }\n                            // xss-lint: disable=javascript-concat-html\n                            string = '<stringresponse answer=\"' + firstAnswer + '\"' + typ + ' >\\n';\n                            if (textHint.hint) {\n                                // xss-lint: disable=javascript-concat-html\n                                string += '  <correcthint' + textHint.labelassign + '>' +\n                                    textHint.hint + '</correcthint>\\n'; // xss-lint: disable=javascript-concat-html\n                            }\n\n                            // Subsequent cases are not= or or=\n                            for (i = 0; i < values.length; i += 1) {\n                                textHint = extractHint(values[i]);\n                                notMatch = /^not\\=\\s*(.*)/.exec(textHint.nothint);\n                                if (notMatch) {\n                                    // xss-lint: disable=javascript-concat-html\n                                    string += '  <stringequalhint answer=\"' + notMatch[1] + '\"' +\n                                        // xss-lint: disable=javascript-concat-html\n                                        textHint.labelassign + '>' + textHint.hint + '</stringequalhint>\\n';\n\n                                    continue;\n                                }\n                                orMatch = /^or\\=\\s*(.*)/.exec(textHint.nothint);\n                                if (orMatch) {\n                                    // additional_answer with answer= attribute\n                                    // xss-lint: disable=javascript-concat-html\n                                    string += '  <additional_answer answer=\"' + orMatch[1] + '\">';\n                                    if (textHint.hint) {\n                                        // xss-lint: disable=javascript-concat-html\n                                        string += '<correcthint' + textHint.labelassign + '>' +\n                                            // xss-lint: disable=javascript-concat-html\n                                            textHint.hint + '</correcthint>';\n                                    }\n                                    string += '</additional_answer>\\n';\n                                }\n                            }\n\n                            string += '  <textline size=\"20\"/>\\n</stringresponse>\\n\\n';\n\n                            return string;\n                        };\n\n                    return processNumericalResponse(answersList) || processStringResponse(answersList);\n                });\n\n\n                // replace explanations\n                xml = xml.replace(/\\[explanation\\]\\n?([^\\]]*)\\[\\/?explanation\\]/gmi, function(match, p1) {\n                    // xss-lint: disable=javascript-concat-html\n                    return '<solution>\\n<div class=\"detailed-solution\">\\n' +\n                        // xss-lint: disable=javascript-concat-html\n                        gettext('Explanation') + '\\n\\n' + p1 + '\\n</div>\\n</solution>';\n                });\n\n                // replace code blocks\n                xml = xml.replace(/\\[code\\]\\n?([^\\]]*)\\[\\/?code\\]/gmi, function(match, p1) {\n                    // xss-lint: disable=javascript-concat-html\n                    return '<pre><code>' + p1 + '</code></pre>';\n                });\n\n                // split scripts and preformatted sections, and wrap paragraphs\n                splits = xml.split(/(\\<\\/?(?:script|pre|label|description).*?\\>)/g);\n\n                // Wrap a string by <p> tag when line is not already wrapped by another tag\n                // true when line is not already wrapped by another tag false otherwise\n                makeParagraph = true;\n\n                for (i = 0; i < splits.length; i += 1) {\n                    if (/\\<(script|pre|label|description)/.test(splits[i])) {\n                        makeParagraph = false;\n                    }\n\n                    if (makeParagraph) {\n                        splits[i] = splits[i].replace(/(^(?!\\s*\\<|$).*$)/gm, '<p>$1</p>');\n                    }\n\n                    if (/\\<\\/(script|pre|label|description)/.test(splits[i])) {\n                        makeParagraph = true;\n                    }\n                }\n\n                xml = splits.join('');\n\n                // rid white space\n                xml = xml.replace(/\\n\\n\\n/g, '\\n');\n\n                // if we've come across demand hints, wrap in <demandhint> at the end\n                if (demandhints) {\n                    demandHintTags.push(demandhints);\n                }\n\n                // make selector to search responsetypes in xml\n                responseTypesSelector = responseTypes.join(', ');\n\n                // make temporary xml\n                // xss-lint: disable=javascript-concat-html\n                $xml = $($.parseXML('<prob>' + xml + '</prob>'));\n                responseType = $xml.find(responseTypesSelector);\n\n                // convert if there is only one responsetype\n                if (responseType.length === 1) {\n                    inputtype = responseType[0].firstElementChild;\n                    // used to decide whether an element should be placed before or after an inputtype\n                    beforeInputtype = true;\n\n                    _.each($xml.find('prob').children(), function(child) {\n                        // we don't want to add the responsetype again into new xml\n                        if (responseType[0].nodeName === child.nodeName) {\n                            beforeInputtype = false;\n                            return;\n                        }\n\n                        if (beforeInputtype) {\n                            // xss-lint: disable=javascript-jquery-insert-into-target\n                            responseType[0].insertBefore(child, inputtype);\n                        } else {\n                            responseType[0].appendChild(child);\n                        }\n                    });\n                    serializer = new XMLSerializer();\n\n                    xml = serializer.serializeToString(responseType[0]);\n\n                    // remove xmlns attribute added by the serializer\n                    xml = xml.replace(/\\sxmlns=['\"].*?['\"]/gi, '');\n\n                    // XMLSerializer messes the indentation of XML so add newline\n                    // at the end of each ending tag to make the xml looks better\n                    xml = xml.replace(/(\\<\\/.*?\\>)(\\<.*?\\>)/gi, '$1\\n$2');\n                }\n\n                // remove class attribute added on <p> tag for question title\n                xml = xml.replace(/\\sclass=\\'qtitle\\'/gi, '');\n                return xml;\n            };\n            responseTypesXML = [];\n            responseTypesMarkdown = markdown.split(/\\n\\s*---\\s*\\n/g);\n            _.each(responseTypesMarkdown, function(responseTypeMarkdown) {\n                if (responseTypeMarkdown.trim().length > 0) {\n                    responseTypesXML.push(toXml(responseTypeMarkdown));\n                }\n            });\n            finalDemandHints = '';\n            if (demandHintTags.length) {\n                // xss-lint: disable=javascript-concat-html\n                finalDemandHints = '\\n<demandhint>\\n' + demandHintTags.join('') + '</demandhint>';\n            }\n            // make all responsetypes descendants of a single problem element\n            // xss-lint: disable=javascript-concat-html\n            finalXml = '<problem>\\n' + responseTypesXML.join('\\n\\n') + finalDemandHints + '\\n</problem>';\n            return finalXml;\n        };\n\n        return MarkdownEditingDescriptor;\n    }(XModule.Descriptor));\n}).call(this);\n\n}.call(window));\n\n\n// WEBPACK FOOTER //\n// ./common/static/xmodule/descriptors/js/001-8b805ada2ba64e646af6992f4da2a942.js"],"sourceRoot":""}